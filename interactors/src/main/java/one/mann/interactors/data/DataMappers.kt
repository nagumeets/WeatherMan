package one.mann.interactors.data

import one.mann.domain.logic.*
import one.mann.domain.model.*

// Map all API data to domain Weather model
internal fun mapToWeather(currentWeather: CurrentWeather, dailyForecast: List<DailyForecast>,
                          hourlyForecast: List<HourlyForecast>, timezone: String, location: Location,
                          units: String): Weather {
    val sunriseTime = epochToMinutes(currentWeather.sunrise, timezone)
    val sunsetTime = epochToMinutes(currentWeather.sunset, timezone)
    return Weather(
            location.id,
            currentWeather.cityName,
            currentWeather.currentTemperature.setUnitsType(units).addUnits(DEGREES),
            feelsLike(currentWeather.currentTemperature, currentWeather.humidity, currentWeather.windSpeed).setUnitsType(units)
                    .addUnits(DEGREES),
            currentWeather.pressure.addUnits(HECTOPASCAL),
            currentWeather.humidity.addUnits(PERCENT),
            currentWeather.description,
            currentWeather.iconId,
            epochToTime(currentWeather.sunrise, timezone),
            epochToTime(currentWeather.sunset, timezone),
            countryCodeToEmoji(currentWeather.countryFlag),
            currentWeather.clouds.addUnits(PERCENT),
            currentWeather.windSpeed.addUnits(METERS_PER_SECOND),
            currentWeather.windDirection.addUnits(DEGREES),
            epochToDate(currentWeather.lastUpdated, timezone),
            currentWeather.visibility.addUnits(METERS),
            lengthOfDay(currentWeather.sunrise, currentWeather.sunset),
            epochToDate(System.currentTimeMillis(), timezone),
            sunPositionBias(sunriseTime, sunsetTime, epochToMinutes(System.currentTimeMillis(), timezone)),
            dailyForecast[0].minTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[0].maxTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            epochToDay(dailyForecast[0].forecastDate, timezone),
            dailyForecast[0].minTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[0].maxTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[0].forecastIconId,
            epochToDay(dailyForecast[1].forecastDate, timezone),
            dailyForecast[1].minTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[1].maxTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[1].forecastIconId,
            epochToDay(dailyForecast[2].forecastDate, timezone),
            dailyForecast[2].minTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[2].maxTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[2].forecastIconId,
            epochToDay(dailyForecast[3].forecastDate, timezone),
            dailyForecast[3].minTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[3].maxTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[3].forecastIconId,
            epochToDay(dailyForecast[4].forecastDate, timezone),
            dailyForecast[4].minTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[4].maxTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[4].forecastIconId,
            epochToDay(dailyForecast[5].forecastDate, timezone),
            dailyForecast[5].minTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[5].maxTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[5].forecastIconId,
            epochToDay(dailyForecast[6].forecastDate, timezone),
            dailyForecast[6].minTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[6].maxTemp.setUnitsType(units).roundOff().addUnits(DEGREES),
            dailyForecast[6].forecastIconId,
            epochToHour(hourlyForecast[0].forecastTime, timezone),
            hourlyForecast[0].temp.setUnitsType(units).roundOff().addUnits(DEGREES),
            hourlyForecast[0].forecastIconId,
            sunPositionBias(sunriseTime, sunsetTime, epochToMinutes(hourlyForecast[0].forecastTime, timezone)),
            epochToHour(hourlyForecast[1].forecastTime, timezone),
            hourlyForecast[1].temp.setUnitsType(units).roundOff().addUnits(DEGREES),
            hourlyForecast[1].forecastIconId,
            sunPositionBias(sunriseTime, sunsetTime, epochToMinutes(hourlyForecast[1].forecastTime, timezone)),
            epochToHour(hourlyForecast[2].forecastTime, timezone),
            hourlyForecast[2].temp.setUnitsType(units).roundOff().addUnits(DEGREES),
            hourlyForecast[2].forecastIconId,
            sunPositionBias(sunriseTime, sunsetTime, epochToMinutes(hourlyForecast[2].forecastTime, timezone)),
            epochToHour(hourlyForecast[3].forecastTime, timezone),
            hourlyForecast[3].temp.setUnitsType(units).roundOff().addUnits(DEGREES),
            hourlyForecast[3].forecastIconId,
            sunPositionBias(sunriseTime, sunsetTime, epochToMinutes(hourlyForecast[3].forecastTime, timezone)),
            epochToHour(hourlyForecast[4].forecastTime, timezone),
            hourlyForecast[4].temp.setUnitsType(units).roundOff().addUnits(DEGREES),
            hourlyForecast[4].forecastIconId,
            sunPositionBias(sunriseTime, sunsetTime, epochToMinutes(hourlyForecast[4].forecastTime, timezone)),
            epochToHour(hourlyForecast[5].forecastTime, timezone),
            hourlyForecast[5].temp.setUnitsType(units).roundOff().addUnits(DEGREES),
            hourlyForecast[5].forecastIconId,
            sunPositionBias(sunriseTime, sunsetTime, epochToMinutes(hourlyForecast[5].forecastTime, timezone)),
            epochToHour(hourlyForecast[6].forecastTime, timezone),
            hourlyForecast[6].temp.setUnitsType(units).roundOff().addUnits(DEGREES),
            hourlyForecast[6].forecastIconId,
            sunPositionBias(sunriseTime, sunsetTime, epochToMinutes(hourlyForecast[6].forecastTime, timezone)),
            location.coordinates[0],
            location.coordinates[1],
            location.coordinates.coordinatesInString()
    )
}